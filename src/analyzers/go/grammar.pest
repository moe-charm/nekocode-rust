// Go Grammar (simplified for quick implementation)
program = { SOI ~ statement* ~ EOI }
statement = { function_def | struct_def | interface_def | import_stmt | ANY }

// Basic constructs
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
function_def = { "func" ~ identifier ~ "(" ~ parameter_list? ~ ")" ~ return_type? ~ "{" }
struct_def = { "type" ~ identifier ~ "struct" ~ "{" }
interface_def = { "type" ~ identifier ~ "interface" ~ "{" }
import_stmt = { "import" ~ ("(" ~ import_list ~ ")" | import_path) }
import_list = { import_path+ }
import_path = { "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
parameter_list = { parameter ~ ("," ~ parameter)* }
parameter = { identifier ~ type_spec }
return_type = { type_spec | "(" ~ type_list ~ ")" }
type_spec = { identifier }
type_list = { type_spec ~ ("," ~ type_spec)* }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* | "/*" ~ (!"*/" ~ ANY)* ~ "*/" }