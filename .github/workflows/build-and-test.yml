# 🦀 NekoCode Rust - Build and Test
# Builds the project and runs comprehensive tests

name: 🚀 Build & Test

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/**'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: 🔍 Check formatting
        run: cargo fmt --all -- --check
        
      - name: 📋 Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: 🧪 Run tests
        run: cargo test --verbose
        
      - name: 🏗️ Build release
        run: cargo build --release --verbose
        
      - name: ✅ Verify binary
        run: |
          ls -la target/release/
          ./target/release/nekocode-rust --version
          
      - name: 📊 Test binary functionality
        run: |
          # Create test directory structure
          mkdir -p test-sample/src
          echo 'console.log("Hello, NekoCode!");' > test-sample/src/app.js
          echo 'function testFunc() { return 42; }' >> test-sample/src/app.js
          
          # Test basic analysis
          echo "🔍 Testing basic analysis..."
          ./target/release/nekocode-rust analyze test-sample/ --format json
          
          # Test impact analysis  
          echo "🔍 Testing impact analysis..."
          ./target/release/nekocode-rust analyze-impact test-sample/ --format github-comment
          
      - name: 📦 Prepare release artifacts
        run: |
          mkdir -p releases/
          cp target/release/nekocode-rust releases/nekocode-rust
          chmod +x releases/nekocode-rust
          
      - name: 📋 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nekocode-rust-${{ runner.os }}
          path: releases/nekocode-rust
          retention-days: 30

  integration-test:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: nekocode-rust-${{ runner.os }}
          path: releases/
          
      - name: ✅ Set permissions
        run: chmod +x releases/nekocode-rust
        
      - name: 🧪 Test with real projects
        run: |
          # Test with various file types
          mkdir -p integration-test/{js,ts,py,cpp,cs,go,rs}
          
          # JavaScript test
          echo 'export class TestClass { method() { return "test"; } }' > integration-test/js/test.js
          
          # TypeScript test
          echo 'interface ITest { value: number; } class Test implements ITest { value = 42; }' > integration-test/ts/test.ts
          
          # Python test
          echo 'class TestClass: 
              def __init__(self): 
                  self.value = 42
              def method(self):
                  return "test"' > integration-test/py/test.py
          
          # C++ test
          echo '#include <iostream>
          class TestClass {
          public:
              int getValue() { return 42; }
          };' > integration-test/cpp/test.cpp
          
          # Test each language
          echo "🔍 Testing multi-language support..."
          ./releases/nekocode-rust analyze integration-test/ --format json
          
          echo "✅ Integration tests passed!"

  benchmark:
    name: 📊 Performance Benchmark
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: nekocode-rust-${{ runner.os }}
          path: releases/
          
      - name: ✅ Set permissions
        run: chmod +x releases/nekocode-rust
        
      - name: 📊 Performance benchmark
        run: |
          # Create larger test project
          mkdir -p benchmark-project/src
          
          # Generate test files
          for i in {1..10}; do
            echo "// File $i
            export class TestClass$i {
              constructor() {
                this.value = $i;
              }
              
              process() {
                console.log('Processing $i');
                return this.value * 2;
              }
              
              async asyncMethod() {
                return new Promise(resolve => {
                  setTimeout(() => resolve(this.value), 100);
                });
              }
            }" > benchmark-project/src/test$i.js
          done
          
          # Benchmark analysis
          echo "⏱️ Running performance benchmark..."
          time ./releases/nekocode-rust analyze benchmark-project/ --stats-only
          
          echo "📊 Benchmark complete!"