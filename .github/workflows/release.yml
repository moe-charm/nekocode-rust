# 🚀 NekoCode Rust - Release
# Creates GitHub releases with binaries for multiple platforms

name: 📦 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build-matrix:
    name: 🏗️ Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: nekocode-rust-linux-x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: nekocode-rust-windows-x64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            name: nekocode-rust-macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: nekocode-rust-macos-arm64
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🦀 Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-
            
      - name: 🏗️ Build release binary
        run: |
          cargo build --release --target ${{ matrix.target }} --verbose
          
      - name: 📦 Prepare binary
        shell: bash
        run: |
          mkdir -p dist/
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/nekocode-rust.exe dist/${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/nekocode-rust dist/${{ matrix.name }}
          fi
          
          # Verify binary
          ls -la dist/
          
      - name: ✅ Test binary
        shell: bash
        run: |
          chmod +x dist/${{ matrix.name }}
          
          # Test basic functionality
          dist/${{ matrix.name }} --version
          
          # Create test file
          mkdir -p test-dir
          echo 'console.log("test");' > test-dir/test.js
          
          # Test analysis
          dist/${{ matrix.name }} analyze test-dir/ --format json
          
      - name: 📋 Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/${{ matrix.name }}
          retention-days: 1

  create-release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: build-matrix
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: 📋 List artifacts
        run: |
          echo "📦 Built artifacts:"
          find artifacts/ -type f -exec ls -la {} \;
          
      - name: 🏷️ Determine release tag
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
          
      - name: 📝 Generate release notes
        id: notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 NekoCode Rust ${{ steps.tag.outputs.tag }}
          
          **High-performance code analysis tool - 16x faster than traditional parsers!**
          
          ### ✨ Features
          - 🦀 **Ultra-fast**: Built with Rust + Tree-sitter
          - 🌍 **Multi-language**: JavaScript, TypeScript, C++, C, Python, C#, Go, Rust
          - 🤖 **AI-optimized**: Perfect for Claude Code and AI workflows
          - 🔍 **Impact analysis**: PR change analysis with risk assessment
          - 📊 **Rich output**: JSON, GitHub comment, and plain text formats
          
          ### 📦 Installation
          
          **Linux/macOS:**
          ```bash
          wget https://github.com/moe-charm/nekocode-rust/releases/download/${{ steps.tag.outputs.tag }}/nekocode-rust-linux-x64
          chmod +x nekocode-rust-linux-x64
          ./nekocode-rust-linux-x64 --version
          ```
          
          **Windows:**
          ```cmd
          # Download nekocode-rust-windows-x64.exe
          nekocode-rust-windows-x64.exe --version
          ```
          
          ### 🔧 Usage Examples
          
          ```bash
          # Basic analysis
          ./nekocode-rust analyze src/
          
          # PR impact analysis
          ./nekocode-rust analyze-impact . --format github-comment --compare-ref main
          
          # Multi-threaded analysis
          ./nekocode-rust analyze large-project/ --threads 8 --stats-only
          ```
          
          ### 🎯 Perfect for:
          - Claude Code MCP integration
          - GitHub Actions CI/CD
          - Code review automation
          - Architecture analysis
          - Technical debt assessment
          
          ---
          
          **Full documentation**: [README.md](https://github.com/moe-charm/nekocode-rust/blob/main/README.md)
          EOF
          
      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: NekoCode Rust ${{ steps.tag.outputs.tag }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            artifacts/nekocode-rust-linux-x64/nekocode-rust-linux-x64
            artifacts/nekocode-rust-windows-x64.exe/nekocode-rust-windows-x64.exe
            artifacts/nekocode-rust-macos-x64/nekocode-rust-macos-x64
            artifacts/nekocode-rust-macos-arm64/nekocode-rust-macos-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📊 Release summary
        run: |
          echo "🎉 Release ${{ steps.tag.outputs.tag }} created successfully!"
          echo "📦 Binaries available for:"
          echo "  - Linux x64"
          echo "  - Windows x64"  
          echo "  - macOS x64"
          echo "  - macOS ARM64"
          echo ""
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }}"